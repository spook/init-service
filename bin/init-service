#!/usr/bin/perl -w
use strict;
use warnings;
use Getopt::Long;
use Init::Service;

# dispatch
my $opts = {};
Getopt::Long::Configure("bundling");
GetOptions($opts,
            "help|h",
            "verbose|v",
            "type|t=s",
            "title|d=s",
            "runcmd|r=s",
            "prerun|p=s@",
            "postrun|o=s@",
            "prestop|P=s@",
            "poststop|O=s@",
            "enable|e",
            "start|s",
            ) or usage("*** Command options error", 1);
usage(q{}, 0) if $opts->{help};
my $func = lc $ARGV[0] || q{};
   $func = "status" if $func eq "show";
my $name = $ARGV[1]    || q{};
usage("*** Provide both a function and service name", 1) 
    unless (@ARGV >= 2) || ((@ARGV >= 1) && ($func eq 'status'));
usage("*** Extraneous parameters", 1)
    unless @ARGV <= 2;

# Dispatch
my $svc = new Init::Service();
$func eq 'add'        ? do_add($svc, $name, $opts)     :
$func eq 'disable'    ? $svc->disable($name)           :
$func eq 'enable'     ? $svc->enable($name)            :
$func eq 'is-enabled' ? is_enabled($svc, $name, $opts) :
$func eq 'is-running' ? is_running($svc, $name, $opts) :
$func eq 'remove'     ? $svc->remove($name)            :
$func eq 'start'      ? $svc->start($name)             :
$func eq 'status'     ? do_status($svc, $name, $opts)  :
$func eq 'stop'       ? $svc->stop($name)              :
usage("*** Unknown function '$func'", 1);
die "*** " . $svc->error . "\n" if $svc->error;
print "Done\n" if $opts->{verbose} && ($func ne "status");
exit 0;

#                           ------- o -------

sub usage {
    print STDERR q{Usage: init-service FUNCTION [SVCNAME [options...]]

  Functions:
    start   - Runs the service; if already running, an error is emitted
    stop    - Stops a running service; if not running, an error is emitted
    restart - Stops then starts a service
    reload  - Sends a SIGHUP to the service, if running
    enable  - Mark a service start at boot; does not affect current state
    disable - Make service not start at boot; does not affect current state
    add     - Create (define) the service on the system
    remove  - Makes service unknown to the system; will stop and disable first
    status  - Displays status of the service; without SVCNAM show init system
    show    - Alias for status
    is-running - Check if running now (use in scripts)
    is-enabled - Check if enabled at boot (use in scripts)

  General Options:
    -h --help     Show this usage help
    -v --verbose  Show more output

  Options for 'add' function:
    -r --runcmd CMD   Command and args to run the service
    -t --type TYPE    Type of service, one of: simple forking notify oneshot
    -d --title DSC    Short description of the service
    -p --prerun CMD   Command and args to run before starting the service
    -o --postrun CMD  Command and args to run after starting the service
    -P --prestop CMD  Command and args to run before stopping the service
    -O --poststop CMD Command and args to run after stopping the service
    -e --enable       Enable the service so it starts at boot
    -s --start        Start the service now, after adding it

    -p, -o, -P, -O may be repeated for multiple commands.
};
    print STDERR shift(@_) . "\n" if @_;
    exit(shift(@_) || 0);
}

sub do_add {
    my $svc  = shift;
    my $name = shift;
    my $opts = shift;
    die "*** '--runcmd' missing\n" unless $opts->{runcmd};
    $svc->add(-name     => $name,
              -title    => $opts->{title}    || q{},
              -type     => $opts->{type}     || "simple",
              -prerun   => $opts->{prerun}   || [],
              -runcmd   => $opts->{runcmd},
              -postrun  => $opts->{postrun}  || [],
              -prestop  => $opts->{prestop}  || [],
              -poststop => $opts->{poststop} || [],
              -enable   => $opts->{enable}   || 0,
              -start    => $opts->{start}    || 0,
             );
}

sub do_status {
    my $svc  = shift;
    my $name = shift;
    my $opts = shift;
    if (!$name) {
        print $svc->initsys() . "\n";
        exit($svc->error() ? 255 : 0);
    }
    $svc->load(-name => $name);
    die "*** " . $svc->error . "\n" if $svc->error;
    print "Service:   " . $svc->name . "\n";
    print "Running:   " . ($svc->running ? "Yes\n" : "No\n");
    print "Enabled:   " . ($svc->enabled ? "Yes\n" : "No\n");
    return unless $opts->{verbose};
    print "Init Sys:  " . $svc->initsys . "\n";
    print "Init File: " . $svc->initfile . "\n";
    print "Type:      " . $svc->type . "\n";
    print "Title:     " . $svc->title . "\n";
    my @prerun = $svc->prerun();
    if (@prerun) {
        print "Pre-run:\n    " . join("    \n", @prerun) . "\n";
    }
    else {
        print "Pre-run:\n";
    }
    print "Run:       " . $svc->runcmd() . "\n";
    my @postrun = $svc->postrun();
    if (@postrun) {
        print "Post-run:\n    " . join("    \n", @postrun) . "\n";
    }
    else {
        print "Post-run:\n";
    }
}

sub is_enabled {
    my $svc  = shift;
    my $name = shift;
    my $opts = shift;
    $svc->load(-name => $name);
    if ($svc->error) {
        print "$name: " . $svc->error . "\n" if $opts->{verbose};
        exit 5;
    }
    print "$name: " . ($svc->enabled? "enabled\n" : "disabled\n") if $opts->{verbose};
    exit($svc->enabled? 0 : 2);
}

sub is_running {
    my $svc  = shift;
    my $name = shift;
    my $opts = shift;
    $svc->load(-name => $name);
    if ($svc->error) {
        print "$name: " . $svc->error . "\n" if $opts->{verbose};
        exit 5;
    }
    print "$name: " . ($svc->running? "running\n" : "stopped\n") if $opts->{verbose};
    exit($svc->running? 0 : 2);
}

__END__

=head1 NAME

init-service - add, remove, enable, disable, start, stop, and show services

=head1 VERSION

Version 2017.03.13

=head1 SYNOPSIS

    # Define (create/add) a new system service called foo-daemon
    #   Set it to start on boot and also run it right now
    init-service add foo-daemon \
        --runcmd '/usr/bin/foo-daemon -D -p1234' \
        --enabled --start

    init-service start foo-daemon   # Run it now
    init-service stop  foo-daemon   # Stop it now
    init-service enable foo-daemon  # Make it start at boot
    init-service disable foo-daemon # Make it not start at boot
    init-service remove foo-daemon  # Remove it completly
    init-service status foo-daemon  # Show its status
    init-service is-enabled foo-daemon  # Check if enabled for boot
    init-service is-running foo-daemon  # Check if running now


=head1 DESCRIPTION

Regardless of whether you use SysV, upstart, or systemd as your init system,
this command makes it easy to add/remove, enable/disable for boot, start/stop,
and check status on your system services.

You no longer need to write init.d scripts, upstart .conf files, nor systemd
unit files!  This command handles the creation/removal of the init file for
your service and the management of the underlying init system so your service
is started or not at boot, can be started or stopped immediately, and also to
check status on your service.

You must be root to use this command.

=head1 FUNCTIONS

=head2 C<add>

TBS...

=head2 C<remove>

TBS...

=head2 C<start>

TBS...

=head2 C<stop>

TBS...

=head2 C<enable>

TBS...

=head2 C<disable>

TBS...

=head2 C<status>

Display the status and other info about the service.
Exits with 0 for a known service, non-zero for an unknown service.
Example:

    # init-service foo-daemon status
    Enabled/Running
    Init System: upstart
    Init File:   /etc/init/foo-daemon.conf

=head2 C<is-running>

Checks if the service is currently running; exits with 0 if it is, non-zero if not.
Useful within shell scripts; for a more human-friendly output use the I<status> function.
Gives no output, just the exit status, unless --verbose.

=head2 C<is-enabled>

Checks if the service would start at boot; exits with 0 if it is, non-zero if not.
Useful within shell scripts; for a more human-friendly output use the I<status> function.
Gives no output, just the exit status, unless --verbose.

=head1 AUTHOR

Uncle Spook, C<< <spook at MisfitMountain.org> >>

=head1 BUGS & SUPPORT

Please report any bugs or feature requests via the GitHub issue
tracker at https://github.com/spook/init-service/issues .

You can find documentation for this module with the perldoc command.

    perldoc Init::Service

or via its man pages:

    man init-service        # for the command line interface
    man Init::Service       # for the Perl module


=head1 SUPPORT

You can find documentation for this utility and module with the perldoc command.

    perldoc Init::Service

You can also look for information at:

=over 4

=item * RT: CPAN's request tracker (report bugs here)

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Init-Service>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/Init-Service>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/Init-Service>

=item * Search CPAN

L<http://search.cpan.org/dist/Init-Service/>

=back


=head1 ACKNOWLEDGEMENTS


=head1 LICENSE AND COPYRIGHT

This program is released under the following license: MIT

Copyright 2017 Uncle Spook.
See https://github.com/spook/init-service

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut
